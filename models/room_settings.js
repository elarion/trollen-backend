const mongoose = require('mongoose');

const roomSettingSchema = mongoose.Schema({
    // Identifiant unique de la configuration de la salle
    _id: {
        type: mongoose.Schema.Types.ObjectId,
        auto: true
    },

    // R√©f√©rence vers la salle concern√©e
    room_id: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'rooms',  // üìé R√©f√©rence vers la collection `rooms`
        required: true, // Un param√®tre de salle doit obligatoirement √™tre li√© √† une salle
        index: true,   // Optimisation pour retrouver rapidement les param√®tres d'une salle
        unique: true,  // Chaque salle ne peut avoir qu'une seule configuration
    },

    // Nombre maximum de participants autoris√©s
    max: {
        type: Number,
        required: true,  // Ce champ est obligatoire
        default: 0,      // Valeur par d√©faut illimit√©e (√† ajuster si besoin)
        min: 0,          // Ne peut pas √™tre n√©gatif
    },

    // Indique si la salle est s√©curis√©e (contenu mod√©r√©)
    is_safe: {
        type: Boolean,
        required: true,  // Ce champ est obligatoire
        default: false,  // Par d√©faut, la salle n'est pas mod√©r√©e
    },

    // D√©termine si la salle est priv√©e ou publique
    is_private: {
        type: Boolean,
        required: true, // Ce champ est obligatoire
        default: true,  // Par d√©faut, les salles sont priv√©es
    },

    // Mot de passe pour rejoindre une salle priv√©e (optionnel)
    password: {
        type: String, // Stockage d'un hash si n√©cessaire
    },
}, { timestamps: true });

const RoomSettings = mongoose.model('room_settings', roomSettingSchema);

module.exports = RoomSettings;
